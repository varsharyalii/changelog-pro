# Changelog Pro - Cursor Rules for Plan Mode

You are working on `changelog-pro`, an open-source CLI tool for generating beautiful HTML changelogs from markdown. The goal is to make this the **best npm changelog tool available**.

## üéØ Project Vision
Build a professional-grade CLI tool that developers love to use, with zero-config defaults but deep customization options. Think Prettier/ESLint quality - simple on the surface, powerful underneath.

## üìã Core Principles

### Developer Experience First
- **Convention over Configuration**: Works perfectly with zero config
- **Fast Feedback**: Watch mode, live preview, instant validation
- **Clear Error Messages**: Actionable guidance, not technical jargon
- **Integration Ready**: Seamless CI/CD, build tools, frameworks

### Professional Quality Standards
- **Semantic Versioning**: Follow semver strictly
- **Comprehensive Testing**: Unit, integration, CLI tests
- **Performance**: Fast parsing, efficient builds
- **Security**: Input validation, safe HTML generation

### Extensibility & Customization
- **Plugin System**: Custom parsers, formatters, themes
- **Template Engine**: Easy theming without touching code
- **API-First**: Programmatic usage alongside CLI

## üõ† Technical Architecture Guidelines

### Code Organization
```
lib/           # Core functionality
  parsers/     # Modular parsers (markdown, git, etc.)
  formatters/  # Output formatters (html, json, pdf)
  themes/      # Built-in themes
  plugins/     # Plugin system
bin/           # CLI entry points
templates/     # HTML templates
docs/          # Documentation
examples/      # Integration examples
```

### API Design Patterns
- **Builder Pattern**: Fluent configuration API
- **Plugin Architecture**: Easy extensibility
- **Event System**: Hooks for customization
- **Validation Layer**: Input/output validation

### Error Handling Strategy
- **User-Friendly Messages**: No technical errors in CLI output
- **Debug Mode**: Verbose output for troubleshooting
- **Exit Codes**: Meaningful codes for CI/CD integration
- **Recovery Suggestions**: Always suggest next steps

## üöÄ Feature Roadmap Priority

### Phase 1: Developer Essentials
1. **Zero-Config Setup**
   - `changelog init` command
   - Smart defaults (CHANGELOG.md ‚Üí docs/changelog.html)
   - Configuration file support

2. **Development Workflow**
   - Watch mode for live development
   - Local preview server
   - Hot reload capabilities

3. **Professional CLI**
   - Comprehensive help system
   - Debug/verbose modes
   - Progress indicators

### Phase 2: Advanced Features
1. **Multi-Format Support**
   - Keep a Changelog standard
   - Conventional Commits
   - Git commit parsing

2. **Output Formats**
   - JSON API export
   - RSS feed generation
   - PDF generation
   - Static site integration

3. **Theming System**
   - Multiple built-in themes
   - Custom theme scaffolding
   - CSS customization hooks

### Phase 3: Ecosystem Integration
1. **Framework Plugins**
   - Next.js plugin
   - Gatsby plugin
   - Vite plugin

2. **CI/CD Integration**
   - GitHub Actions
   - Docker containers
   - Release automation

3. **Git Integration**
   - Auto-generation from commits
   - Release tagging
   - Semantic version bumping

## üìù Code Standards

### TypeScript Usage
- **Strict Mode**: Enable all strict checks
- **Type Safety**: No `any` types in production code
- **Documentation**: JSDoc for all public APIs
- **Interfaces**: Define clear contracts

### Testing Requirements
- **Coverage**: Minimum 90% code coverage
- **Test Types**: Unit, integration, CLI end-to-end
- **Test Structure**: Arrange-Act-Assert pattern
- **Mocking**: Mock external dependencies

### Performance Standards
- **Startup Time**: CLI should start in <100ms
- **Build Speed**: 1000 changelog entries in <1s
- **Memory Usage**: Linear scaling with input size
- **Bundle Size**: Keep dependencies minimal

## üé® UX Guidelines

### CLI Design
```bash
# Good: Simple, memorable commands
changelog build
changelog serve
changelog init

# Avoid: Verbose, forgettable syntax
node bin/changelog-pro generate -i input.md -o output.html
```

### Error Message Format
```bash
‚ùå Parse Error: CHANGELOG.md line 15
   Expected: ## 1.0.0 (2025-01-01)
   Found:    ## Version 1.0.0
   
üí° Fix: Use semantic version format with date
üìñ Guide: https://changelog-pro.dev/formats#versions
```

### Progress Indicators
```bash
üîÑ Parsing changelog...
üìã Found 25 releases
üé® Applying theme: professional
‚úÖ Generated changelog.html (142kb)
```

## üîß Development Workflow

### Commit Messages
Use Conventional Commits:
- `feat:` New features
- `fix:` Bug fixes
- `docs:` Documentation changes
- `perf:` Performance improvements
- `refactor:` Code refactoring
- `test:` Test additions/changes

### Branch Strategy
- `main`: Production-ready code
- `develop`: Integration branch
- `feature/*`: New features
- `fix/*`: Bug fixes
- `release/*`: Release preparation

### Release Process
1. Version bump (semantic versioning)
2. Update CHANGELOG.md
3. Run full test suite
4. Build and publish to npm
5. Create GitHub release
6. Update documentation

## üìö Documentation Standards

### README Structure
1. **Hero Section**: Clear value proposition
2. **Quick Start**: 30-second setup
3. **Examples**: Real-world usage
4. **API Reference**: Complete documentation
5. **Contributing**: Developer guide

### Code Documentation
- **JSDoc**: All public methods
- **Examples**: Inline code examples
- **Type Annotations**: Clear TypeScript types
- **Architecture**: High-level design docs

## üèÜ Quality Benchmarks

### Performance Targets
- Parse 1000 entries: <500ms
- Generate HTML: <200ms
- CLI startup: <100ms
- Memory usage: <50MB for large changelogs

### Developer Experience Metrics
- Time to first success: <2 minutes
- Configuration complexity: Zero for basic use
- Error resolution time: <30 seconds
- Learning curve: Flat for developers

### Ecosystem Integration
- Framework compatibility: All major tools
- CI/CD support: All major platforms
- Plugin ecosystem: Extensible architecture
- Community adoption: Growing user base

## üéØ Success Metrics

### Technical KPIs
- GitHub stars growth
- npm download trends
- Issue resolution time
- Community contributions

### User Satisfaction
- Time to value (first successful build)
- Configuration simplicity
- Error message helpfulness
- Feature request patterns

## üö´ Anti-Patterns to Avoid

### CLI Design
- Verbose commands that are hard to remember
- Complex configuration for simple use cases
- Technical error messages in user output
- Inconsistent command naming

### Code Architecture
- Monolithic single files
- Tight coupling between modules
- Missing error boundaries
- Poor separation of concerns

### User Experience
- Requiring configuration for basic usage
- Unclear error states
- Missing progress feedback
- Inconsistent output formatting

## üí° Innovation Opportunities

### Unique Features
- **AI-Powered Categorization**: Auto-classify changes
- **Interactive CLI**: TUI for complex operations
- **Change Impact Analysis**: Visualize breaking changes
- **Multi-Project Sync**: Monorepo changelog aggregation

### Developer Productivity
- **Smart Templates**: Context-aware theme selection
- **Change Validation**: Lint changelog entries
- **Auto-Generation**: Git commit ‚Üí changelog entries
- **Release Planning**: Version impact analysis

---

Remember: We're building the **Prettier of changelog tools** - simple by default, powerful when needed, loved by developers worldwide. 