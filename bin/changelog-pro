#!/usr/bin/env node

/**
 * Changelog Pro CLI - Entry Point
 * Professional thin CLI that delegates to command modules
 */

const { program } = require("commander");
const pkg = require("../package.json");

// Import command modules
const generateCommand = require("./cli/commands/generate");
const initCommand = require("./cli/commands/init");
const previewCommand = require("./cli/commands/preview");
const statsCommand = require("./cli/commands/stats");

// Configure main program
program
  .name("changelog-pro")
  .description("Professional changelog generator and processor")
  .version(pkg.version);

// Register commands
program
  .command("generate")
  .description("Generate HTML from markdown changelog")
  .option("-i, --input <file>", "Input markdown file", "CHANGELOG.md")
  .option("-o, --output <file>", "Output HTML file", "changelog.html")
  .option(
    "--install-command <command>",
    "Install command for tooltips (use {version} placeholder)",
  )
  .option("-v, --verbose", "Show detailed output")
  .action(async (options) => {
    try {
      await generateCommand(options);
    } catch (error) {
      console.error("‚ùå Error:", error.message);
      process.exit(1);
    }
  });

program
  .command("init")
  .description("Initialize project with sample changelog")
  .option("-i, --input <file>", "Input markdown file", "CHANGELOG.md")
  .option("-o, --output <file>", "Output HTML file", "changelog.html")
  .option("--force", "Overwrite existing files")
  .action(async (options) => {
    try {
      await initCommand(options);
    } catch (error) {
      console.error("‚ùå Error:", error.message);
      process.exit(1);
    }
  });

program
  .command("preview")
  .description("Start live preview server")
  .option("-i, --input <file>", "Input markdown file", "CHANGELOG.md")
  .option("-p, --port <number>", "Server port", "3000")
  .option(
    "--install-command <command>",
    "Install command for tooltips (use {version} placeholder)",
  )
  .action(async (options) => {
    try {
      await previewCommand(options);
    } catch (error) {
      console.error("‚ùå Error:", error.message);
      process.exit(1);
    }
  });

program
  .command("stats")
  .description("Show changelog statistics")
  .option("-i, --input <file>", "Input markdown file", "CHANGELOG.md")
  .action(async (options) => {
    try {
      await statsCommand(options);
    } catch (error) {
      console.error("‚ùå Error:", error.message);
      process.exit(1);
    }
  });

// Show help when no command is provided
program.action(() => {
  program.help();
});

// Global error handler for unhandled rejections
process.on("unhandledRejection", (error) => {
  console.error("üí• Unhandled error:", error.message);
  if (process.env.DEBUG) {
    console.error(error.stack);
  }
  process.exit(1);
});

// Parse and execute
program.parseAsync(process.argv).catch((error) => {
  console.error("üí• Fatal error:", error.message);
  if (process.env.DEBUG) {
    console.error(error.stack);
  }
  process.exit(1);
});
